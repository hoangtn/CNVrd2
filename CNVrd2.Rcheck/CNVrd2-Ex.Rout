
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CNVrd2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('CNVrd2')
Loading required package: DNAcopy
Loading required package: Rsamtools
Loading required package: IRanges
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:stats’:

    xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, as.data.frame,
    cbind, colnames, duplicated, eval, get, intersect, lapply, mapply,
    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, rank,
    rbind, rep.int, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unlist

Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: VariantAnnotation
Loading required package: rjags
Loading required package: coda
Loading required package: lattice
Linked to JAGS 3.4.0
Loaded modules: basemod,bugs
Loading required package: ggplot2
Loading required package: gridExtra
Loading required package: grid
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CNVrd2-class")
> ### * CNVrd2-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CNVrd2-class
> ### Title: Class '"CNVrd2"'
> ### Aliases: CNVrd2-class countReadInWindow,CNVrd2-method
> ###   plotCNVrd2,CNVrd2-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("CNVrd2")
Class "CNVrd2" [package "CNVrd2"]

Slots:
                                                                            
Name:        windows           chr            st            en    dirBamFile
Class:       numeric     character       numeric       numeric     character
                                                
Name:  dirCoordinate         genes     geneNames
Class:     character       numeric     character
> 
> 
> 
> cleanEx()
> nameEx("calculateLDSNPandCNV")
> ### * calculateLDSNPandCNV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculateLDSNPandCNV
> ### Title: calculateLDSNPandCNV
> ### Aliases: calculateLDSNPandCNV
> 
> ### ** Examples
> 
> ##Load data: fcgr3bMXL in CNVrd2 package############
> data(fcgr3bMXL)
> ##Name a vcf file (vcfFile)
> vcfFile <- system.file(package="CNVrd2", "extdata",
+                       "chr1.161600000.161611000.vcf.gz")
> ##Make a data fame named sampleCNV including samples, CNs, population names
> 
> sampleCNV <- data.frame(copynumberGroups$allGroups[, c(1,2) ],rep("MXL", 58))
> 
> rownames(sampleCNV) <- substr(sampleCNV[, 1], 1, 7)
> sampleCNV[, 1] <- rownames(sampleCNV)
> ##The first column must be the sample names 
> tagSNPandINDELofMXL <- calculateLDSNPandCNV(sampleCNV = sampleCNV,
+                                  vcfFile = vcfFile, cnvColumn = 2,
+                                  population = "MXL", popColumn = 3,
+                                  nChunkForVcf = 5, chr = "1",
+                                  st = 161600000, en = 161611000,
+                                  codeSNP= "Three", codeCNV = "ThreeGroup")
Reading the VCF file 1:161600000-161611000 with 5 blocks each
VCF file: 161600000 to 161602750
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
VCF file: 161602751 to 161605500
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
VCF file: 161605501 to 161608250
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
VCF file: 161608251 to 161611000
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
Warning in .bcfHeaderAsSimpleList(header) :
  duplicate keys in header will be forced to unique rownames
Calculating p and r2 values for MXL population.
Warning in data.row.names(row.names, rowsi, i) :
  some row.names duplicated: 8,10,20,22,24,25,26,30,35,36,38,40,44,45,50,53,59,61,62,63,64,65,67,68,69,71,73,77,78,84,85,87,89,90,93,94,95,97,99,103,104,105,106,107,111,113,118,119,121,122,123,124,127 --> row.names NOT used
> tagSNPandINDELofMXL[1:3,]
            1CN_(n=3) 2CN_(n=36) 3CN_(n=15) p.values    r p.valuesAdjusted   r2
rs117435514         0       2.78      86.67  2.1e-09 0.81          1.3e-07 0.66
rs185696163         0       2.78      86.67  2.1e-09 0.81          1.3e-07 0.66
rs34015117          0       2.78      80.00  2.3e-08 0.77          9.6e-07 0.59
            POP
rs117435514 MXL
rs185696163 MXL
rs34015117  MXL
> 
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("clusteringCNVs-class")
> ### * clusteringCNVs-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusteringCNVs-class
> ### Title: Class '"clusteringCNVs"'
> ### Aliases: clusteringCNVs-class objectCluster
> ###   emnormalCNV,clusteringCNVs-method groupCNVs,clusteringCNVs-method
> ###   searchGroupCNVs,clusteringCNVs-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("clusteringCNVs")
Class "clusteringCNVs" [package "CNVrd2"]

Slots:
                                                                      
Name:                x               k               p               m
Class:         numeric         numeric   numericOrNULL   numericOrNULL
                                                                      
Name:            sigma           small            nMax              EV
Class:   numericOrNULL         numeric         numeric         logical
                                                                      
Name:              eee        nmaxInit nChangeVariance         verbose
Class:         numeric         numeric         numeric         logical
                      
Name:    groupDistance
Class:   numericOrNULL
> 
> 
> 
> cleanEx()
> nameEx("countReadInWindow-methods")
> ### * countReadInWindow-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countReadInWindow-methods
> ### Title: Method 'countReadInWindow'
> ### Aliases: countReadInWindow-methods
> ### Keywords: methods
> 
> ### ** Examples
> 
> ##data(fcgr3bMXL)
> ##readCountMatrix <- countReadInWindow(Object = objectCNVrd2, correctGC = TRUE)
> ##readCountMatrix[1:3, 1:3]
> 
> 
> 
> 
> cleanEx()
> nameEx("countReadInWindow")
> ### * countReadInWindow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countReadInWindow
> ### Title: Obtain read counts in constant windows.
> ### Aliases: countReadInWindow
> ### Keywords: methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(fcgr3bMXL)
> ##D bamFiles <- dir("Bam", pattern = ".bam$")
> ##D objectCNVrd2 <- new("CNVrd2", windows = 1000, chr = "chr1",
> ##D                    st = 161100001, en = 162100000,
> ##D                    dirBamFile = "Bam",
> ##D                    genes = c(161592986, 161601753),
> ##D                    geneNames = "3B")
> ##D 
> ##D readCountMatrix <- countReadInWindow(Object = objectCNVrd2, correctGC = TRUE)
> ##D readCountMatrix[1:3, 1:3]
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("emnormalCNV")
> ### * emnormalCNV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: emnormalCNV
> ### Title: Implement the EM algorithm
> ### Aliases: emnormalCNV
> 
> ### ** Examples
> 
> data(fcgr3bMXL)
> 
> sS <- resultSegment$segmentationScores
> #########Histogram###########################
> ###View segmentation scores##################
> hist(sS[, 1], 100)
> ############################################
> ##Number of components#######################
> ###Make an object of clusteringCNVs class######
> objectCluster <- new("clusteringCNVs",
+                      x = sS[, 1], k = 4, EV = TRUE)
> 
> set.seed(123)
> copynumberGroups <- groupCNVs(Object = objectCluster)
=====================================
7 iterations
4 components with Equal variances
m: -1.30876666665667-0.02580184504113590.9838838408971832.08487018121448
p: 0.05172413793153550.6896606864511990.2069007456105260.0517144300067392
sigma: 0.1469858562965880.1469858562965880.1469858562965880.146985856296588
====================================
> 
> 
> 
> cleanEx()
> nameEx("groupBayesianCNVs")
> ### * groupBayesianCNVs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groupBayesianCNVs
> ### Title: groupBayesianCNVs
> ### Aliases: groupBayesianCNVs
> ### Keywords: methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(ccl3l1data)
> ##D 
> ##D xyEuro <- ccl3l1data[grep("CEU|TSI|IBS|GBR|FIN", ccl3l1data[, 2]), ]
> ##D 
> ##D names(yEuro) <- rownames(xyEuro)
> ##D 
> ##D ##Clustering European segmentation scores into group: 5 groups were chosen
> ##D 
> ##D objectClusterEuroCCL3L1 <- new("clusteringCNVs", x = yEuro, k = 5)
> ##D 
> ##D europeanCCL3L1Groups <- groupCNVs(Object = objectClusterEuroCCL3L1)
> ##D 
> ##D ##Obtain prior information
> ##D #Means
> ##D lambda0 <- as.numeric(europeanCCL3L1Groups$m)
> ##D #SD
> ##D sdEM <- as.numeric(europeanCCL3L1Groups$sigma)
> ##D #Proportions
> ##D pEM <- as.numeric(europeanCCL3L1Groups$p)
> ##D 
> ##D 
> ##D ###Calculate the distances between groups
> ##D for (ii in 2:5){print(lambda0[ii] - lambda0[ii-1])}
> ##D 
> ##D ###All segmentation scores
> ##D ccl3l1X <- ccl3l1data$SS
> ##D names(ccl3l1X) <- as.character(ccl3l1data$Name)
> ##D range(ccl3l1X)
> ##D 
> ##D 
> ##D  
> ##D ##Set prior information: 
> ##D #prior for the sd of the means of groups: 
> ##D #5 was set for the third group = 2 CN
> ##D sd <- c(1, 1, 5, 1, 1) 
> ##D ccl3l1X <- sort(ccl3l1X)
> ##D ###Data
> ##D xData <- ccl3l1X
> ##D ###Number of groups
> ##D nGroups <- 10 
> ##D ###prior for means of groups
> ##D lambda0 <- lambda0 
> ##D ###Prior for mixing proportions
> ##D alpha0 <-  c(3, 29, 44, 18, 7,  5, rep(2, nGroups -length(pEM) -1))
> ##D ##Prior for the distances between groups
> ##D distanceBetweenGroups = 0.485
> ##D 
> ##D sdEM = sdEM
> ##D 
> ##D 
> ##D ##Adjust standard deviation for the fifth group
> ##D sdEM[5] <- sdEM[4]
> ##D  
> ##D  set.seed(123)
> ##D  groupCCL3L1allPops <- groupBayesianCNVs(xData = xData, nGroups = nGroups,
> ##D                                          lambda0 = lambda0,
> ##D                                          sd0 = sdEM, alpha0 = alpha0,
> ##D                                          distanceBetweenGroups = distanceBetweenGroups,
> ##D                                          sdOftau = sd,
> ##D                                         rightLimit = 4)
> ##D 
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("groupCNVs")
> ### * groupCNVs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groupCNVs
> ### Title: Cluster segmentation scores into groups.
> ### Aliases: groupCNVs
> ### Keywords: methods
> 
> ### ** Examples
> 
> data("fcgr3bMXL")
> #resultSegment <- segmentSamples(Object = objectCNVrd2, stdCntMatrix = readCountMatrix)
> objectCluster <- new("clusteringCNVs",
+                      x = resultSegment$segmentationScores[, 1], k = 4, EV = TRUE)
> 
> #searchGroupCNVs(Object = objectCluster)
> copynumberGroups <- groupCNVs(Object = objectCluster)
=====================================
7 iterations
4 components with Equal variances
m: -1.30876666665667-0.02580184504113590.9838838408971832.08487018121448
p: 0.05172413793153550.6896606864511990.2069007456105260.0517144300067392
sigma: 0.1469858562965880.1469858562965880.1469858562965880.146985856296588
====================================
> 
> 
> 
> 
> cleanEx()
> nameEx("identifyPolymorphicRegion")
> ### * identifyPolymorphicRegion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: identifyPolymorphicRegion
> ### Title: Identity polymorphic regions.
> ### Aliases: identifyPolymorphicRegion
> ### Keywords: methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D fcgr3PolymorphicRegion <- identifyPolymorphicRegion(Object = objectCNVrd2,
> ##D                                                     segmentObject = resultSegment, 
> ##D                                                     thresholdForPolymorphicRegions = c(0.75, 0.25),
> ##D                                                     plotLegend = FALSE)
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plotCNVrd2")
> ### * plotCNVrd2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotCNVrd2
> ### Title: Plot traces of samples.
> ### Aliases: plotCNVrd2
> ### Keywords: methods plots
> 
> ### ** Examples
> 
> data(fcgr3bMXL)
> ##Obtain all information of CNVs
> allGroups <- copynumberGroups$allGroups
> ###Obtain names of duplicate samples
> duplicatedSamples <- rownames(allGroups[allGroups[, 2] > 2,])
> ###Plot the first duplicate samples
> par(mfrow = c(3, 2))
> for (ii in duplicatedSamples[1:6])  
+ plotCNVrd2(Object = objectCNVrd2,
+            segmentObject = resultSegment,
+            sampleName = ii)
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("plotPolymorphicRegion")
> ### * plotPolymorphicRegion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotPolymorphicRegion
> ### Title: Plot polymorphic regions.
> ### Aliases: plotPolymorphicRegion
> ### Keywords: plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D plotPolymorphicRegion(Object = objectCNVrd2, polymorphicRegionObject = fcgr3PolymorphicRegion,
> ##D                       xlim = c(161300000, 161800000), drawThresholds = TRUE,
> ##D                       thresholdForPolymorphicRegions = c(0.75, 0.25))
> ##D 
> ##D 
> ##D 
> ##D ##Change thresholds
> ##D plotPolymorphicRegion(Object = objectCNVrd2, polymorphicRegionObject = fcgr3PolymorphicRegion,
> ##D                       xlim = c(161300000, 161800000), drawThresholds = TRUE,
> ##D                       thresholdForPolymorphicRegions = c(0.9, 0.1))
> ##D 
> ##D 
> ##D ##Plot standard deviation
> ##D 
> ##D plotPolymorphicRegion(Object = objectCNVrd2, polymorphicRegionObject = fcgr3PolymorphicRegion,
> ##D                       xlim = c(161300000, 161800000), typePlot = "SD",
> ##D                       thresholdForPolymorphicRegions = c(0.75, 0.25))
> ##D 
> ##D 
> ##D 
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("segmentSamples")
> ### * segmentSamples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: segmentSamples
> ### Title: Implement the segmentation process
> ### Aliases: segmentSamples
> ### Keywords: methods
> 
> ### ** Examples
> 
> data(fcgr3bMXL)
> ## Not run: resultSegment <- segmentSamples(Object = objectCNVrd2, stdCntMatrix = readCountMatrix)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  11.316 1.092 12.548 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
