setGeneric("plotPolymorphicRegion",
           function(Object, ...){standardGeneric("plotPolymorphicRegion")})

setMethod("plotPolymorphicRegion", "CNVrd2",
          function(Object, polymorphicRegionObject = NULL,
                                      xlim = NULL,
                   xlab = NULL, ylabQuantile = NULL,
                   ylabSD = NULL,
                                      quantileValue = c(0.1, 0.5, 0.9),
                                      quantileColor = NULL,
                                      thresholdForPolymorphicRegions =
                                      c(0.975, 0.025),
                                      drawThresholds = FALSE,
                                      geneColor = 'lightpink',
                                      cex = 1.2, lwd = 1.5,
                                      verticalAdjustment = 0.3,
                                      plotLegend = TRUE){
    
##Checking parameters
  st = Object@st
  en = Object@en
  if (!is.null(xlim)){
    if ((xlim[1] < st) | (xlim[2] > en))
      stop("Please choose coordinates in the region")
     if ((xlim[1] > en ) | (xlim[2] < st ))
      stop("Please choose coordinates in the region")


    outputST <- xlim[1]
    outputEND <- xlim[2]
    }
  else {
  outputST = st
  outputEND = en}
  
   windows = Object@windows
  chr = Object@chr
  genes <- Object@genes
  geneNames = Object@geneNames
  quantileValue <- sort(quantileValue)

    nQuantile <- length(quantileValue)


  if (is.null(ylabQuantile))
      ylabQuantile <- "Segmentation-score quantile"
  if (is.null(ylabSD))
      ylabSD <- "Segmentation-score SD"
  
  if (is.null(xlab))
      xlab <- paste(chr, ":", outputST, "-", outputEND, sep = "")
      
  thresholdForPolymorphicRegions <- sort(thresholdForPolymorphicRegions)

  if (is.null(quantileColor))
      quantileColor <- seq(length(quantileValue)) + 1
#####################################
  genes <- matrix(genes, nrow = 2)

  mxInterAll <- polymorphicRegionObject$subRegionMatrix
  subRegionData <- polymorphicRegionObject$subRegion
  mSD <- polymorphicRegionObject$mSD
  nCol <- dim(subRegionData)[1]
  
  mQuantile <- apply(mxInterAll, 2, function(x)
                     quantile(x, quantileValue))


  ###################Plot####################################
#########Identify max, min of all quantile values
  minQuantile <- min(apply(mQuantile, 1, min))
  maxQuantile <- max(apply(mQuantile, 1, max))

  ###Function to transform data############################
  transtoDataFrame <- function(x, y, colour = 1){

    tempF <- data.frame(x1= sort(c(x[, 1], x[, 2])),
               x2 = as.numeric(apply(matrix(y, ncol = 1), 1,
               function(x) rep(x, 2))))
    tempF <- data.frame(tempF, Quantile = rep(colour, dim(tempF)[1]))


    return(tempF)

    }
  ########################################


  dfQuantile <- NULL
    ###Make a list to store quantile values
  listQ <- list()
  for (ii in 1:length(quantileValue)){
      mQ <- data.frame(subRegionData, mQuantile[ii, ])
      listQ[[ii]] <- mQ
      index1 <- as.integer(rownames(mQ[(mQ[, 1] <= outputST) & (mQ[, 2]>=outputST), ]))[1]
          
      index2 <- as.integer(rownames(mQ[(mQ[, 1] <= outputEND) & (mQ[, 2]>=outputEND), ]))[1]

      mQ <- mQ[index1:index2, ]
      dfQuantile <- rbind(dfQuantile, transtoDataFrame(x = mQ[, c(1, 2)],
                                                       y = mQ[, 3],
                                                       colour = as.character(rownames(mQuantile)[ii])))
  }
  
      
  #########Plot the region#############################
  thresholdsTogetPolymorphicRegions <- c(quantile(listQ[[1]][, 3],
                                            thresholdForPolymorphicRegions[1]),
                                         quantile(listQ[[nQuantile]][, 3],
                                              thresholdForPolymorphicRegions[2]))
  print(thresholdsTogetPolymorphicRegions)
  print(c(mQ[1, 1], mQ[dim(mQ)[1], 2], mQ[dim(mQ)[1], 2], mQ[index1, 1]))
  
  if (drawThresholds)
      dfQuantile <- rbind(dfQuantile, data.frame(x1 = c(mQ[1, 1], mQ[dim(mQ)[1], 2], mQ[dim(mQ)[1], 2],mQ[1, 1]),
                                                 x2 = c(rep(thresholdsTogetPolymorphicRegions[1], 2),
                                                        rep(thresholdsTogetPolymorphicRegions[2], 2)),
                                                 
                                                 Quantile = rep("Threshold", 4)))
                            
  p1 <- ggplot(data= dfQuantile, aes(x=x1, y=x2, group = Quantile, colour=Quantile)) + geom_line(size=cex) +
      coord_cartesian(xlim = c(outputST, outputEND)) + theme(legend.position="top") + xlab(xlab) + ylab(ylabQuantile)
  ##############Plot genes
  print(p1)

  x1 = c(mQ[1, 1], mQ[dim(mQ)[1], 2], mQ[dim(mQ)[1], 2],mQ[1, 1])
  x2 = c(rep(thresholdsTogetPolymorphicRegions[1], 2),
                                                        rep(thresholdsTogetPolymorphicRegions[2], 2))
  print(x1)
  print(x2)

  #############Plot regions' sds####################################
  mSD <- mSD[index1:index2,]
  dfSD <- data.frame(transtoDataFrame(x = mSD[, c(1, 2)],
                                      y = mSD[, 3]))
  
  p2 <- ggplot(data= dfSD, aes(x=x1, y=x2)) + geom_line(size=cex) +
      coord_cartesian(xlim = c(outputST, outputEND)) + xlab(xlab) + ylab(ylabSD) 
  print(p2)

            
  ######################Identity polymorphic regions##################
  ##Extract the first and the last rows of quantile matrixes
  lowBoundary   <- listQ[[1]][listQ[[1]][, 3] <= quantile(listQ[[1]][, 3],
                                            thresholdForPolymorphicRegions[1]), ]
  highBoundary <- listQ[[nQuantile]][listQ[[nQuantile]][, 3] >=
                                     quantile(listQ[[nQuantile]][, 3],
                                              thresholdForPolymorphicRegions[2]), ]

  lowBoundary <- reduce(IRanges(lowBoundary[, 1], lowBoundary[, 2]))
  highBoundary <- reduce(IRanges(highBoundary[, 1], highBoundary[, 2]))
  unionBoundary <- reduce(union(lowBoundary, lowBoundary))

  end(unionBoundary) <- end(unionBoundary) - 1


   return(putativeBoundary = unionBoundary)



})
